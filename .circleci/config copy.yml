version: 2.1
orbs:
  node: circleci/node@5
  github: circleci/github-cli@2

jobs:
  # STAGE BUILD
  install_dependencies:
    executor: node/default
    steps:
      - checkout
      - run: echo "🚀 Installing dependencies..."
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Verify Next.js installation
          command: npm list next || echo "⚠️ Next.js not installed!"

  code_analysis:
    executor: node/default
    steps:
      - checkout
      - run: echo "🔍 Performing static code analysis..."

  clean_package_and_update:
    executor: node/default
    steps:
      - checkout
      - run: echo "🧹 Cleaning and packaging the application..."
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Verify Next.js installation
          command: npm list next || echo "⚠️ Next.js not installed!"

  build_project:
    executor: node/default
    steps:
      - checkout
      - run: echo "🚀 Running Build Process..."
      - run:
          name: Install Dependencies Before Build
          command: npm install
  # Bon bah le build marche pas des masses avec Next.js je comprend pas l'erreur
  #      - run:
  #          name: Build Project
  #          command: npm run build

  # STAGE TESTS (Parallélisation)
  unit-tests:
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - run: echo "🧪 Running unit tests..."
  #      - run:
  #          name: Run tests
  #          command: npm run test:ci
  #      - store_test_results:
  #          path: ./test-results/

  integration_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🤖 Running integration tests..."

  regression_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🔍 Running regression tests..."

  performance_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🏎️ Running performance tests..."

  security_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🛡️ Running security tests..."

  compatibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🔧 Running compatibility tests..."

  accessibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🌈 Running accessibility tests..."

  # STAGE DEPLOYMENT
  deploy_development:
    executor: node/default
    steps:
      - checkout
      - run: echo "🌱 Deploying to development..."
      - run: echo "🔍 Running verification and functional tests..."

  # PRODUCTION DEPLOYMENT
  deploy_production:
    executor: node/default
    steps:
      - checkout
      - run: echo "🎉 Deploying to production..."

  monitoring_tracking:
    executor: node/default
    steps:
      - checkout
      - run: echo "🔒 Running final validation and monitoring..."
  #      - run:
  #          name: Start Monitoring
  #          command: npm run monitor

  # STAGE MERGE FEATURE -> DEVELOP (Pull Request automatique)
  create_pr_feature:
    executor: node/default
    steps:
      - checkout
      - run:
          name: Install GitHub CLI
          command: |
            echo "🔄 Installing GitHub CLI..."
            sudo apt update && sudo apt install -y gh
      - run:
          name: Create Pull Request
          command: |
            echo "🔄 Fetching the latest commits from develop..."
            git fetch origin develop || echo "⚠️ Failed to fetch develop branch"

            echo "📋 Retrieving commit messages from the feature branch..."
            COMMITS=$(git log origin/develop..HEAD --pretty=format:"- %h %s")

            if [[ -z "$COMMITS" ]]; then
              echo "❌ No new commits found! Aborting PR creation."
              exit 1
            fi

            echo "✅ Commits found:"
            echo "$COMMITS"

            # Convert newline characters for GitHub Markdown formatting
            COMMITS_FORMATTED=$(echo "$COMMITS" | sed ':a;N;$!ba;s/\n/%0A/g')

            echo "🚀 Creating Pull Request on GitHub..."
            echo "$GITHUB_TOKEN" | gh auth login --with-token || echo "⚠️ GitHub authentication failed!"

            gh pr create \
              --base develop \
              --head ${CIRCLE_BRANCH} \
              --title "🚀 Feature ready: ${CIRCLE_BRANCH}" \
              --body "### Commits included in this PR:%0A%0A$COMMITS_FORMATTED"

  test_hotfix_necessary:
    executor: node/default
    steps:
      - checkout
      - run: echo "🔍 Running just necessary tests for hotfix..."

  # STAGE DEPLOYMENT WITH PUSH VERSIONING
  push_version:
    executor: node/default
    steps:
      - checkout
      - run: echo "📌 Tagging new version based on branch..."
      - run:
          name: Generate Version Tag
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            if [[ "$BRANCH_NAME" == "develop" ]]; then
              echo "🔖 Generating development version tag"
              VERSION_TAG="dev-$(date +%Y%m%d%H%M%S)"
            elif [[ "$BRANCH_NAME" == "integration" ]]; then
              echo "🔖 Generating integration version tag"
              VERSION_TAG="int-$(date +%Y%m%d%H%M%S)"
            elif [[ "$BRANCH_NAME" == "main" ]]; then
              echo "🔖 Generating production release tag"
              VERSION_TAG="v1.0-$(date +%Y%m%d%H%M%S)"
            else
              echo "⚠️ Unknown branch, skipping tagging"
              exit 0
            fi
            echo "Version Tag: $VERSION_TAG"
            echo "$VERSION_TAG" > VERSION_FILE
      - run: echo "🚀 Pushing version tag to repository (to be implemented)"

  deploy_environment_prep:
    executor: node/default
    steps:
      - checkout
      - run: echo "🛠️ Preparing deployment environment..."

  functional_validation_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "✅ Running functional validation tests..."

  load_testing:
    executor: node/default
    steps:
      - checkout
      - run: echo "📊 Running load testing..."
  deploy_staging:
    executor: node/default
    steps:
      - checkout
      - run: echo "🚀 Deploying to staging..."
      - run: echo "🔍 Running validation tests on staging..."

workflows:
  version: 2

  full_pipeline:
    jobs:
      # === BUILD STAGE ===
      - install_dependencies
      - code_analysis
      - clean_package_and_update:
          requires:
            - install_dependencies
            - code_analysis

      - build_project:
          requires: [clean_package_and_update]

      # === TESTS ===
      - unit-tests:
          requires: [build_project]
      - integration_tests:
          requires: [build_project]
      - regression_tests:
          requires: [build_project]
      - performance_tests:
          requires: [build_project]
      - security_tests:
          requires: [build_project]
      - compatibility_tests:
          requires: [build_project]
      - accessibility_tests:
          requires: [build_project]

      # === VERSION PUSH ===
      - push_version:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only:
                - develop
                - integration
                - main

      - deploy_environment_prep:
          requires: [push_version]

      # === DEPLOYMENT STAGE ===
      - deploy_development:
          requires: [deploy_environment_prep]
          filters:
            branches:
              only: develop

      - launch_tests_staging_and_production:
          requires:
            - deploy_environment_prep
            - performance_tests
            - functional_validation_tests
            - load_testing
          filters:
            branches:
              only:
                - integration
                - main

      # === DEPLOYMENT PRODUCTION ===
      - deploy_production:
          requires: [launch_tests_staging_and_production]
          filters:
            branches:
              only: main

      # === DEPLOYMENT STAGING ===
      - deploy_staging:
          requires: [launch_tests_staging_and_production]
          filters:
            branches:
              only: main

      - deploy_staging:
          requires: [load_testing]
          filters:
            branches:
              only: integration

      # 📌 Gestion automatique des branches temporaires
      - create_pr_feature:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: /^feature\/.*$/

      # Hotfix merge to main With just necessary tests
      - test_hotfix_necessary:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - security_tests
            - compatibility_tests
          filters:
            branches:
              only: /^hotfix\/.*$/

      - monitoring_tracking:
          requires:
            - deploy_staging
            - deploy_production
          filters:
          branches:
            only:
              - main
              - integration
