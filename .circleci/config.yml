version: 2.1
orbs:
  node: circleci/node@5
  github: circleci/github-cli@2

jobs:
  # STAGE BUILD
  build:
    executor: node/default
    steps:
      - checkout
      - run: echo "🚀 Installation des dépendances..."
      - run: echo "🔍 Analyse de code..."
      - run: echo "🧹 Cleaning et Packaging..."

  # STAGE TESTS (Parallélisation)
  unit-tests:
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: echo "🧪 Running unit tests..."
      - run:
          command: npm install jest-junit
      - run:
          name: Run tests
          command: npm run test:ci
      - store_test_results:
          path: ./test-results/

  integration_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🤖 Running integration tests..."

  regression_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🔍 Running regression tests..."

  performance_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🏎️ Running performance tests..."

  security_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🛡️ Running security tests..."

  compatibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🔧 Running compatibility tests..."

  accessibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🌈 Running accessibility tests..."

  # STAGE DEPLOYMENT
  deploy_development:
    executor: node/default
    steps:
      - checkout
      - run: echo "🌱 Deploying to development..."
      - run: echo "🔍 Running verification and functional tests..."

  deploy_production:
    executor: node/default
    steps:
      - checkout
      - run: echo "🎉 Deploying to production..."
      - run: echo "🔒 Running final validation and monitoring..."

  # STAGE MERGE FEATURE -> DEVELOP (Pull Request automatique)
  create_pr_feature:
    executor: node/default
    steps:
      - checkout
      - run: |
          echo "🔄 Récupération des commits de la branche feature..."
          git fetch origin develop
          COMMITS=$(git log origin/develop..HEAD --pretty=format:"- %h %s" | sed ':a;N;$!ba;s/\n/\\n/g')
          echo "📋 Messages de commit récupérés :"
          echo -e "$COMMITS"

          echo "🚀 Création de la Pull Request..."
          echo $GITHUB_TOKEN | gh auth login --with-token
          gh pr create \
            --base develop \
            --head ${CIRCLE_BRANCH} \
            --title "🚀 Feature prête : ${CIRCLE_BRANCH}" \
            --body "Voici les commits inclus dans cette PR :%0A%0A$COMMITS"

  # STAGE MERGE HOTFIX -> MAIN (Fusion automatique)
  merge_hotfix_main:
    executor: node/default
    steps:
      - checkout
      - run: |
          echo "🚨 Fusion automatique du hotfix dans main..."
          git config --global user.email "circleci@ci.com"
          git config --global user.name "CircleCI Bot"
          git fetch origin main
          git checkout main
          git merge --no-ff ${CIRCLE_BRANCH}
          git push origin main

workflows:
  version: 2

  full_pipeline:
    jobs:
      - build
      # Lancer tous les tests en parallèle après le build
      - unit-tests:
          requires: [build]
      - integration_tests:
          requires: [build]
      - regression_tests:
          requires: [build]
      - performance_tests:
          requires: [build]
      - security_tests:
          requires: [build]
      - compatibility_tests:
          requires: [build]
      - accessibility_tests:
          requires: [build]

      # 🚀 Déploiement après tous les tests sur develop et main
      - deploy_development:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: develop

      - deploy_production:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: main

      # 📌 Gestion automatique des branches temporaires
      - create_pr_feature:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: /^feature\/.*$/

      - merge_hotfix_main:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: /^hotfix\/.*$/
