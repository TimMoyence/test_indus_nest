version: 2.1
orbs:
  node: circleci/node@5

jobs:
  # Stage BUILD : Installation, Analyse, Cleaning & Packaging
  build:
    executor: node/default
    steps:
      - checkout
      - run: echo "🚀 Build - Installation des dépendances..."
      - run: echo "🔍 Build - Analyse de code en cours..."
      - run: echo "🧹 Build - Cleaning et Packaging de l'application..."

  # Stage TESTS (jobs lancés en parallèle après le build)
  unit-tests:
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: echo "🧪 Unit tests - Lancement des tests complets..."
      - run:
          command: npm install jest-junit
      - run:
          name: Run tests
          command: npm run test:ci
      - store_test_results:
          path: ./test-results/

  integration_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🤖 Integration tests - On vérifie les interactions..."

  regression_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🔍 Regression tests - À la chasse aux régressions..."

  performance_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🏎️ Performance tests - Boostons la vitesse !"

  security_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🛡️ Security tests - Renforçons la sécurité !"

  compatibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🔧 Compatibility tests - Tout s'assemble bien ?"

  accessibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "🌈 Accessibility tests - Pour une appli accessible et fun !"

  # Job minimal pour les branches hotfix (tests réduits)
  minimal-tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "⚡ Hotfix detected - Exécution des tests essentiels uniquement..."
      - run: echo "✅ Tests minimaux validés avec succès !"

  # Stage DEPLOY
  deploy_development:
    executor: node/default
    steps:
      - checkout
      - run: echo "🌱 Déploiement DEV - Préparation de l'environnement..."
      - run: echo "🚀 Déploiement DEV - Lancement de l'application..."
      - run: echo "🔍 Vérifications et validation fonctionnelle..."

  deploy_integration:
    executor: node/default
    steps:
      - checkout
      - run: echo "🚧 Déploiement INTÉGRATION - Préparation et déploiement..."
      - run: echo "✅ Tests de validation et charge..."

  deploy_production:
    executor: node/default
    steps:
      - checkout
      - run: echo "🎉 Déploiement PROD - En production, c'est parti !"
      - run: echo "🔒 Vérifications, validations et monitoring activé !"

workflows:
  version: 2

  # Pipeline complet pour les branches "develop", "integration" et "main"
  full_pipeline:
    jobs:
      - build:
          filters:
            branches:
              ignore:
                - /^hotfix\/.*$/
                - /^feature\/.*$/
      # Lancement parallèle des tests (ils ne dépendent que du build)
      - unit-tests:
          requires: [build]
          filters:
            branches:
              ignore:
                - /^hotfix\/.*$/
                - /^feature\/.*$/
      - integration_tests:
          requires: [build]
          filters:
            branches:
              ignore:
                - /^hotfix\/.*$/
                - /^feature\/.*$/
      - regression_tests:
          requires: [build]
          filters:
            branches:
              ignore:
                - /^hotfix\/.*$/
                - /^feature\/.*$/
      - performance_tests:
          requires: [build]
          filters:
            branches:
              ignore:
                - /^hotfix\/.*$/
                - /^feature\/.*$/
      - security_tests:
          requires: [build]
          filters:
            branches:
              ignore:
                - /^hotfix\/.*$/
                - /^feature\/.*$/
      - compatibility_tests:
          requires: [build]
          filters:
            branches:
              ignore:
                - /^hotfix\/.*$/
                - /^feature\/.*$/
      - accessibility_tests:
          requires: [build]
          filters:
            branches:
              ignore:
                - /^hotfix\/.*$/
                - /^feature\/.*$/
      # Déploiement - chaque job attend que tous les tests soient terminés
      - deploy_development:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: develop
      - deploy_integration:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: integration
      - deploy_production:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: main

  # Pipeline minimal pour les branches hotfix (et éventuellement feature)
  hotfix_pipeline:
    jobs:
      - build:
          filters:
            branches:
              only:
                - /^hotfix\/.*$/
      - minimal-tests:
          requires: [build]
          filters:
            branches:
              only:
                - /^hotfix\/.*$/
      - deploy_development:
          requires: [minimal-tests]
          filters:
            branches:
              only:
                - /^hotfix\/.*$/
