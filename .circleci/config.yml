version: 2.1
orbs:
  node: circleci/node@5
  github: circleci/github-cli@2

jobs:
  # STAGE BUILD
  install_dependencies:
    executor: node/default
    steps:
      - checkout
      - run: echo "üöÄ Installing dependencies..."
      - node/install-packages:
          pkg-manager: npm

  code_analysis:
    executor: node/default
    steps:
      - checkout
      - run: echo "üîç Performing static code analysis..."
      - run:
          name: Run Linter
          command: npm run lint

  clean_package:
    executor: node/default
    steps:
      - checkout
      - run: echo "üßπ Cleaning and packaging the application..."
      - run:
          name: Build Project
          command: npm run build

  # STAGE TESTS (Parall√©lisation)
  unit-tests:
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm
      - run: echo "üß™ Running unit tests..."
      - run:
          command: npm install jest-junit
      - run:
          name: Run tests
          command: npm run test:ci
      - store_test_results:
          path: ./test-results/

  integration_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "ü§ñ Running integration tests..."

  regression_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "üîç Running regression tests..."

  performance_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "üèéÔ∏è Running performance tests..."

  security_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "üõ°Ô∏è Running security tests..."

  compatibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "üîß Running compatibility tests..."

  accessibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "üåà Running accessibility tests..."

  # STAGE DEPLOYMENT
  deploy_development:
    executor: node/default
    steps:
      - checkout
      - run: echo "üå± Deploying to development..."
      - run: echo "üîç Running verification and functional tests..."

  # PRODUCTION DEPLOYMENT
  deploy_production:
    executor: node/default
    steps:
      - checkout
      - run: echo "üéâ Deploying to production..."
      - run: echo "üîí Running final validation and monitoring..."

  monitoring_tracking:
    executor: node/default
    steps:
      - checkout
      - run: echo "üîí Running final validation and monitoring..."
      - run:
          name: Start Monitoring
          command: npm run monitor

  # STAGE MERGE FEATURE -> DEVELOP (Pull Request automatique)
  create_pr_feature:
    executor: node/default
    steps:
      - checkout
      - run:
          name: Install GitHub CLI
          command: |
            echo "üîÑ Installing GitHub CLI..."
            sudo apt update && sudo apt install -y gh
      - run:
          name: Create Pull Request
          command: |
            echo "üîÑ Fetching the latest commits from develop..."
            git fetch origin develop || echo "‚ö†Ô∏è Failed to fetch develop branch"

            echo "üìã Retrieving commit messages from the feature branch..."
            COMMITS=$(git log origin/develop..HEAD --pretty=format:"- %h %s")

            if [[ -z "$COMMITS" ]]; then
              echo "‚ùå No new commits found! Aborting PR creation."
              exit 1
            fi

            echo "‚úÖ Commits found:"
            echo "$COMMITS"

            # Convert newline characters for GitHub Markdown formatting
            COMMITS_FORMATTED=$(echo "$COMMITS" | sed ':a;N;$!ba;s/\n/%0A/g')

            echo "üöÄ Creating Pull Request on GitHub..."
            echo "$GITHUB_TOKEN" | gh auth login --with-token || echo "‚ö†Ô∏è GitHub authentication failed!"

            gh pr create \
              --base develop \
              --head ${CIRCLE_BRANCH} \
              --title "üöÄ Feature ready: ${CIRCLE_BRANCH}" \
              --body "### Commits included in this PR:%0A%0A$COMMITS_FORMATTED"

workflows:
  version: 2

  full_pipeline:
    jobs:
      # === BUILD STAGE ===
      - install_dependencies
      - code_analysis
      - clean_package:
          requires:
            - install_dependencies
            - code_analysis

      # === TESTS ===
      - unit-tests:
          requires: [clean_package]
      - integration_tests:
          requires: [clean_package]
      - regression_tests:
          requires: [clean_package]
      - performance_tests:
          requires: [clean_package]
      - security_tests:
          requires: [clean_package]
      - compatibility_tests:
          requires: [clean_package]
      - accessibility_tests:
          requires: [clean_package]

      # === DEPLOYMENT STAGE ===
      - deploy_development:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: develop

      - deploy_production:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: main

      # üìå Gestion automatique des branches temporaires
      - create_pr_feature:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: /^feature\/.*$/

      - merge_hotfix_main:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - performance_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: /^hotfix\/.*$/

      - monitoring_tracking:
          requires: [deploy_production]
