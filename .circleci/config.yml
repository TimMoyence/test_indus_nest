version: 2.1
orbs:
  node: circleci/node@5
  github: circleci/github-cli@2

jobs:
  # === BUILD STAGE ===
  # Install project dependencies
  install_dependencies:
    executor: node/default
    steps:
      - checkout
      - run: echo "üöÄ Installing dependencies..."
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Verify Next.js installation
          command: npm list next || echo "‚ö†Ô∏è Next.js not installed!"

  # Perform static code analysis
  code_analysis:
    executor: node/default
    steps:
      - checkout
      - run: echo "üîç Performing static code analysis..."

  # Clean and package the application
  clean_package_and_update:
    executor: node/default
    steps:
      - checkout
      - run: echo "üßπ Cleaning and packaging the application..."
      - run:
          name: Install dependencies
          command: npm install
      - run:
          name: Verify Next.js installation
          command: npm list next || echo "‚ö†Ô∏è Next.js not installed!"

  # Build the project
  build_project:
    executor: node/default
    steps:
      - checkout
      - run: echo "üöÄ Running Build Process..."
      - run:
          name: Install Dependencies Before Build
          command: npm install
      - run:
          name: Build Project
          command: npm run build

  # === TESTING STAGE ===
  # Run unit tests
  unit-tests:
    executor: node/default
    environment:
      JEST_JUNIT_OUTPUT_DIR: ./test-results/
    steps:
      - checkout
      - run: echo "üß™ Running unit tests..."

  # Run integration tests
  integration_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "ü§ñ Running integration tests..."

  # Run regression tests
  regression_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "üîç Running regression tests..."

  # Run performance tests
  performance_tests_staging:
    executor: node/default
    steps:
      - checkout
      - run: echo "üìä Running performance tests on staging..."

  performance_tests_production:
    executor: node/default
    steps:
      - checkout
      - run: echo "üèéÔ∏è Running performance tests on PRODUCTION..."

  # Run security tests
  security_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "üõ°Ô∏è Running security tests..."

  # Run compatibility tests
  compatibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "üîß Running compatibility tests..."

  # Run accessibility tests
  accessibility_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "üåà Running accessibility tests..."

  # === DEPLOYMENT STAGE ===
  # Generate a version tag based on the branch
  push_version:
    executor: node/default
    steps:
      - checkout
      - run: echo "üìå Tagging new version based on branch..."
      - run:
          name: Generate Version Tag
          command: |
            BRANCH_NAME=${CIRCLE_BRANCH}
            if [[ "$BRANCH_NAME" == "develop" ]]; then
              echo "üîñ Generating development version tag"
              VERSION_TAG="dev-$(date +%Y%m%d%H%M%S)"
            elif [[ "$BRANCH_NAME" == "integration" ]]; then
              echo "üîñ Generating integration version tag"
              VERSION_TAG="int-$(date +%Y%m%d%H%M%S)"
            elif [[ "$BRANCH_NAME" == "main" ]]; then
              echo "üîñ Generating production release tag"
              VERSION_TAG="v1.0-$(date +%Y%m%d%H%M%S)"
            else
              echo "‚ö†Ô∏è Unknown branch, skipping tagging"
              exit 0
            fi
            echo "Version Tag: $VERSION_TAG"
            echo "$VERSION_TAG" > VERSION_FILE
      - run: echo "üöÄ Pushing version tag to repository (to be implemented)"

  # Prepare the environment before deployment
  deploy_environment_prep:
    executor: node/default
    steps:
      - checkout
      - run: echo "üõ†Ô∏è Preparing deployment environment..."

  # Run functional validation tests
  functional_validation_tests:
    executor: node/default
    steps:
      - checkout
      - run: echo "‚úÖ Running functional validation tests..."

  # Run load testing
  load_testing:
    executor: node/default
    steps:
      - checkout
      - run: echo "üìä Running load testing..."

  # Deploy to the staging environment
  deploy_staging:
    executor: node/default
    steps:
      - checkout
      - run: echo "üöÄ Deploying to staging..."
      - run: echo "üîç Running validation tests on staging..."

  # Deploy to the development environment
  deploy_development:
    executor: node/default
    steps:
      - checkout
      - run: echo "üå± Deploying to development environment..."

  # Deploy to the production environment
  deploy_production:
    executor: node/default
    steps:
      - checkout
      - run: echo "üéâ Deploying to production..."

  # Create a pull request for feature branches
  create_pr_feature:
    executor: node/default
    steps:
      - checkout
      - run:
          name: Install GitHub CLI
          command: |
            echo "üîÑ Installing GitHub CLI..."
            sudo apt update && sudo apt install -y gh
      - run:
          name: Create Pull Request
          command: |
            echo "üîÑ Fetching the latest commits from develop..."
            git fetch origin develop || echo "‚ö†Ô∏è Failed to fetch develop branch"

            echo "üìã Retrieving commit messages from the feature branch..."
            COMMITS=$(git log origin/develop..HEAD --pretty=format:"- %h %s")

            if [[ -z "$COMMITS" ]]; then
              echo "‚ùå No new commits found! Aborting PR creation."
              exit 1
            fi

            echo "‚úÖ Commits found:"
            echo "$COMMITS"

            # Convert newline characters for GitHub Markdown formatting
            COMMITS_FORMATTED=$(echo "$COMMITS" | sed ':a;N;$!ba;s/\n/%0A/g')

            echo "üöÄ Creating Pull Request on GitHub..."
            echo "$GITHUB_TOKEN" | gh auth login --with-token || echo "‚ö†Ô∏è GitHub authentication failed!"

            gh pr create \
              --base develop \
              --head ${CIRCLE_BRANCH} \
              --title "üöÄ Feature ready: ${CIRCLE_BRANCH}" \
              --body "### Commits included in this PR:%0A%0A$COMMITS_FORMATTED"

  # Run necessary tests for hotfix branches
  test_hotfix_necessary:
    executor: node/default
    steps:
      - checkout
      - run: echo "üîç Running necessary tests for hotfix..."

  post_deploy_monitoring_staging:
    executor: node/default
    steps:
      - checkout
      - run: echo "üì° Monitoring STAGING after performance tests..."

  post_deploy_monitoring_production:
    executor: node/default
    steps:
      - checkout
      - run: echo "üì° Monitoring PRODUCTION after performance tests..."

workflows:
  version: 2

  full_pipeline:
    jobs:
      # === BUILD STAGE ===
      - install_dependencies
      - code_analysis
      - clean_package_and_update:
          requires:
            - install_dependencies
            - code_analysis
      - build_project:
          requires: [clean_package_and_update]

      # === TESTING STAGE ===
      - unit-tests:
          requires: [build_project]
      - integration_tests:
          requires: [build_project]
      - regression_tests:
          requires: [build_project]
      - security_tests:
          requires: [build_project]
      - compatibility_tests:
          requires: [build_project]
      - accessibility_tests:
          requires: [build_project]

      # === DEPLOYMENT STAGE ===
      - push_version:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only:
                - develop
                - integration
                - main

      - deploy_environment_prep:
          requires: [push_version]

      - deploy_development:
          requires: [deploy_environment_prep]
          filters:
            branches:
              only: develop

      - deploy_staging:
          requires: [deploy_environment_prep]
          filters:
            branches:
              only: integration

      - deploy_production:
          requires: [deploy_staging]
          filters:
            branches:
              only: main

      # === AUTOMATIC BRANCH MANAGEMENT ===
      # üìå Gestion automatique des branches temporaires
      - create_pr_feature:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - security_tests
            - compatibility_tests
            - accessibility_tests
          filters:
            branches:
              only: /^feature\/.*$/

      # Hotfix merge to main With just necessary tests
      - test_hotfix_necessary:
          requires:
            - unit-tests
            - integration_tests
            - regression_tests
            - security_tests
            - compatibility_tests
          filters:
            branches:
              only: /^hotfix\/.*$/

      # === PERFORMANCE TESTS & MONITORING AFTER DEPLOYMENT ===
      - performance_tests_staging:
          requires: [deploy_staging]
          filters:
            branches:
              only: integration

      - post_deploy_monitoring_staging:
          requires: [performance_tests]
          filters:
            branches:
              only: integration

      - performance_tests_production:
          requires: [deploy_production]
          filters:
            branches:
              only: main

      - post_deploy_monitoring_production:
          requires: [performance_tests]
          filters:
            branches:
              only: main
